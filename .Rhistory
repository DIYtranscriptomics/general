library(shiny)
cite(shiny)
citation(shiny)
citation('shiny')
library("shiny", lib.loc="/Library/Frameworks/R.framework/Versions/3.5/Resources/library")
citation("shiny")
if (!requireNamespace("devtools", quietly = TRUE))
install.packages("devtools")
devtools::install_github("calligross/ggthemeassist")
ggThemeAssist:::ggThemeAssistAddin()
devtools::install_github("ThinkR-open/remedy")
ggThemeAssist:::ggThemeAssistAddin()
library(swirl)
library(swirlify)
swirl::install_course_github("DIYtranscriptomics", "DiYhomework")
swirl()
swirl::uninstall_all_courses()
swirl()
swirl::install_course_github("diytranscriptomics", "diyhomework")
swirl()
swirl::uninstall_all_courses()
swirl::install_course_github("diytranscriptomics", "diyhomework")
swirl()
swirl()
swirl::uninstall_all_courses()
swirl::install_course_github("diytranscriptomics", "DIYhomework")
swirl()
1
swirl::uninstall_all_courses()
swirl()
swirl::uninstall_all_courses()
swirl::install_course_github("DIYtranscriptomics", "swirl_courses")
swirl()
swirl::install_course_github("seankross", "Google_Forms_Course")
swirl()
swirl()
swirl::uninstall_all_courses()
swirl::install_course_github("DIYtranscriptomics", "DIYhomework")
swirl()
install.packages("swirl")
install.packages("swirl")
install.packages("swirlify")
swirl::uninstall_all_courses()
library("swirl", lib.loc="/Library/Frameworks/R.framework/Versions/3.5/Resources/library")
library("swirlify", lib.loc="/Library/Frameworks/R.framework/Versions/3.5/Resources/library")
swirl::install_course_github("DIYtranscriptomics", "DIYhomework")
swirl()
install.packages("devtools")
swirl::uninstall_all_courses()
swirl::install_course_github("DIYtranscriptomics", "DIYhomework")
swirl()
traceback()
swirl::uninstall_all_courses()
swirl::install_course_github("DIYtranscriptomics", "DIYhomework")
swirl()
swirl::uninstall_all_courses()
install_course_zip("~/Desktop/swirl_courses-master.zip", multi=TRUE)
swirl
swirl()
install_course("~/Desktop/swirl_courses-master", multi=TRUE)
install_course_directory(~/Desktop/swirl_courses-master)
install_course_directory("~/Desktop/swirl_courses-master")
swirl()
swirl::uninstall_all_courses()
install_course_directory("~/Desktop/swirl_courses-master")
swirl()
swirl::uninstall_all_courses()
install_course_zip("~/Desktop/test.zip", multi=TRUE)
swirl
swirl()
swirl::uninstall_all_courses()
install_course_directory("~/Desktop/swirl_courses-master")
swirl()
swirl::uninstall_all_courses()
install_course_directory("~/Desktop/swirl_courses-master")
swirl()
swirl::uninstall_all_courses()
install_course_directory("~/Desktop/swirl_courses-master")
swirl
swirl()
swirl()
swirl::uninstall_all_courses()
install_course_directory("~/Desktop/swirl_courses-master")
swirl()
swirl::uninstall_all_courses()
install_course_directory("~/Desktop/swirl_courses-master")
swirl()
swirl::uninstall_all_courses()
install_course_github("DIYtranscriptomics", "scn")
install_course_github("DIYtranscriptomics", "scn")
swirl()
install_course_github("DIYtranscriptomics", "swirl_courses")
swirl()
traceback()
install_course_github("DIYtranscriptomics", "swirl_courses", multi = TRUE)
swirl()
swirl::uninstall_all_courses()
install_course_github("DIYtranscriptomics", "DIYhomework", multi = TRUE)
swirl()
swirl::uninstall_all_courses()
install_course_github("DIYtranscriptomics", "DIYhomework", multi = TRUE)
swirl()
swirl()
swirl()
swirl::uninstall_all_courses()
install_course_github("DIYtranscriptomics", "DIYhomework", multi = TRUE)
swirl()
swirl::uninstall_all_courses()
install_course_github("DIYtranscriptomics", "DIYhomework", multi = TRUE)
swirl()
swirl::uninstall_all_courses()
install_course_github("DIYtranscriptomics", "DIYhomework", multi = TRUE)
swirl()
library(limma)
?limma
?voom
install.packages("datapasta")
source("http://bioconductor.org/biocLite.R")
biocLite()
swirl()
library(swirl)
swirl()
5 +7
x <- 5 +7
x
y <- x-3
y
c(1.1, 9, 3.14)
z <- c(1.1, 9, 3.14)
?c
z
c(z, 555, z)
Z*2 +100
z*2+100
my_sqrt <- sqrt(z-1)
my_sqrt
my_div <- z/my_sqrt
my_div
c(1,2,3,4) + c(0,10)
c(1, 2, 3, 4) + c(0, 10, 100)
z*2+1000
my_div
swirl()
swirl()
swirl()
swirl()
swirl()
install_course_github("diytranscriptomics", “diyhomework")
install_course_github("diytranscriptomics", "diyhomework")
swirl()
swirl::uninstall_all_courses()
install_course_github("diytranscriptomics", "diyhomework")
swirl()
swirl()
swirl::uninstall_all_courses()
install_course_github("diytranscriptomics", "diyhomework")
detach("package:swirl", unload=TRUE)
library("swirl", lib.loc="/Library/Frameworks/R.framework/Versions/3.5/Resources/library")
swirl()
devtools::install_github("swirldev/swirl")
devtools::install_github("swirldev/swirl")
library("swirl", lib.loc="/Library/Frameworks/R.framework/Versions/3.5/Resources/library")
detach("package:swirl", unload=TRUE)
library("swirl", lib.loc="/Library/Frameworks/R.framework/Versions/3.5/Resources/library")
detach("package:swirl", unload=TRUE)
remove.packages(swirl)
library(swirl)
library(swirl)
swirl()
swirl::install_course_github("diytranscriptomics", "diyhomework")
swirl()
swirl()
library(swirl)
swirl()
swirl::install_course(R Programming E)
swirl::install_course("R Programming E")
swirl()
swirl::install_course(“Data Analysis”)
swirl::install_course("Data Analysis")
swirl()
swirl::install_course("Data Analysis")
swirl::install_course("Data Analysis")
swirl::install_course("Getting and Cleaning Data")
swirl()
swirl::install_course("Data Analysis")
swirl::install_from_swirl("Data Analysis")
swirl()
swirl::delete_progress()
swirl::uninstall_all_courses()
swirl()
swirl()
swirl::install_from_swirl()
swirl::uninstall_all_courses()
swirl::install_course("R Programming")
swirl::install_course("Exploratory Data Analysis")
swirl::install_course("Getting and Cleaning Data")
swirl()
swirl::uninstall_all_courses()
setRepositories()
install.packages(c("cranlogs", "DT", "flexdashboard", "gapminder", "jsonlite", "lubridate", "miniUI", "shiny", "shinyBS", "shinydashboard", "shinyjs", "shinythemes", "shinytoastr", "tidyverse"))
```{r sessionInfo, results='asis', message=FALSE, warning=FALSE, echo=FALSE}
datatable(GSEAres,
extensions = c('KeyTable', "FixedHeader"),
caption = 'Gene set enrichment',
options = list(keys = TRUE, searchHighlight = TRUE, pageLength = 10, lengthMenu = c("10", "25", "50", "100"))) %>%
formatRound(columns=c(1:6), digits=3)
tion info
library(EnsDb.Hsapiens.v86) # organism-specific database package
library(sleuth) #for rapid and simple differential gene expression analysis
library(beepr)
# OPTIONAL: modify reference transcriptome .fasta file ----
# depending on your reference transcriptome, we may need to edit the fasta file (but this would only need to be done once)
# Transcript identifiers should NOT have a version number appended to the ID
# this creats a problem later when we try to append annotations based on these IDs
# you would only need to edit this file once
ranges
# Load packages ----
library(tidyverse) # provides access to Hadley Wickham's collection of R packages for data science, which we will use throughout the course
readDNAStringSet
ce fasta file
library(tximport) # package for getting Kallisto results into R
library(ensembldb) # used together with our organism-specific database package (below) to get annotation info
library(EnsDb.Hsapiens.v86) # organism-specific database package
library(sleuth) #for rapid and simple differential gene expression analysis
library(beepr)
library(tidyverse) # provides access to Hadley Wickham's collection of R packages for data science, which we will use throughout the course
library(Biostrings) # we'll use this package to read in and modify our reference fasta file
library(tximport) # package for getting Kallisto results into R
library(ensembldb) # used together with our organism-specific database package (below) to get annotation info
library(EnsDb.Hsapiens.v86) # organism-specific database package
library(sleuth) #for rapid and simple differential gene expression analysis
library(beepr)
install_github("RRHO2/RRHO2")
devtools::install_github("RRHO2/RRHO2")
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install()
install.packages("available")
library(available)
available("pathoseq")
available('lifecyclr')
available('parasite')
library(tidyverse)
inches_height <- function (feet, inches) {
total_inches <- 12 * replace_na(feet, 0) + replace_na(inches, 0)
total_inches[is.na(feet) & is.na(inches)] <- NA
total_inches
}
ounces_weight <- function (pounds, ounces) {
total_ounces <- 16 * replace_na(pounds, 0) + replace_na(ounces, 0)
total_ounces[is.na(pounds) & is.na(ounces)] <- NA
total_ounces
}
combo_weight <- function (df) {
ounces <- with(df, cbind(
ounces_weight(Com2a1a, Com2a1b),
ounces_weight(Com2b1a, Com2b1b),
ounces_weight(Com2c1a, Com2c1b),
ounces_weight(Com2d1a, Com2d1b)))
kg_ounces <- sweep(ounces, 2, 35.274, `/`)
kg <- with(df, cbind(kg_ounces, Com2a2, Com2b2, Com2c2, Com2d2))
apply(kg, 1, mean, na.rm = TRUE)
}
combo_height <- function (df) {
inches <- with(df, cbind(
inches_height(Com1a1a, Com1a1b),
inches_height(Com1b1a, Com1b1b),
inches_height(Com1c1a, Com1c1b),
inches_height(Com1d1a, Com1d1b)))
cm_inches <- sweep(inches, 2, 2.54, `*`)
cm <- with(df, cbind(cm_inches, Com1a2, Com1b2, Com1c2, Com1d2))
apply(cm, 1, mean, na.rm = TRUE)
}
combo <- read_tsv("combo_cafe_clinical_forms/COMBO_COMBO.txt", na = "NULL") %>%
# Race & ethnicity
mutate(Ethnicity = c("Hispanic", "Non-Hispanic")[Com6]) %>%
mutate(NativeAmerican = Com7a) %>%
mutate(Asian = Com7b) %>%
mutate(PacificIslander = Com7c) %>%
mutate(AfricanAmerican = Com7d) %>%
mutate(White = Com7e) %>%
# Gender
mutate(AreYouPregnant = Com29) %>%
mutate(Gender = c("Male", "Female")[Com5]) %>%
# Age
mutate(VisitDate = as.Date(Vdate, format="%d-%b-%Y")) %>%
mutate(BirthDate = as.Date(Com4, format="%d-%b-%Y")) %>%
mutate(AgeYears = as.numeric(VisitDate - BirthDate) / 365.25) %>%
# Height
mutate(HeightCm = combo_height(.)) %>%
mutate(MassKg = combo_weight(.))
combo %>%
mutate(WeightLbs = MassKg * 2.20462, HeightFeet = HeightCm * 0.0328084) %>%
ggplot() +
geom_point(aes(x = HeightFeet, y=WeightLbs)) +
scale_y_continuous(limits = c(0, 325))
combo %>%
gather(Variable, Value, -Pid) %>%
mutate(HasValue = ifelse(is.na(Value), "HasValue", "IsNA")) %>%
group_by(Variable) %>%
count(HasValue) %>%
spread(HasValue, n, fill = 0) %>%
arrange(IsNA)
combo %>%
count(Com5, Gender, AreYouPregnant) %>%
rename(`Gender (Inferred)`=Gender)
combo %>%
count(
Ethnicity, NativeAmerican, Asian, PacificIslander,
AfricanAmerican, White)
combo %>%
ggplot() +
geom_histogram(aes(x=AgeYears), binwidth = 1)
combo %>%
select(Pid, Gender, AgeYears) %>%
rename(SubjectID = Pid, Sex = Gender) %>%
write_csv("combo_ages.csv")
combo %>%
filter(Pid %in% jake_subjs$SubjectID) %>%
select(Pid, Gender, AgeYears, Ethnicity, NativeAmerican, Asian, PacificIslander,
AfricanAmerican, White, HeightCm, MassKg) %>%
rename(SubjectID = Pid, Sex = Gender) %>%
write_csv("combo_subject_info_for_almut.csv")
cafe <- read_tsv("combo_cafe_clinical_forms/CAFE_MEDHX.txt", na = "NULL") %>%
# Keep CaFE1 only
filter(grepl("^20", Pid, perl=TRUE)) %>%
# Sex, assuming the coding is the same as COMBO
mutate(Sex = c("Male", "Female")[Med2]) %>%
# Race & ethnicity
mutate(Ethnicity = c("Hispanic", "Non-Hispanic")[Med3]) %>%
mutate(NativeAmerican = Med4a) %>%
mutate(Asian = Med4b) %>%
mutate(PacificIslander = Med4c) %>%
mutate(AfricanAmerican = Med4d) %>%
mutate(White = Med4e) %>%
# Age
mutate(BirthDate = as.Date(Med1, format="%d-%b-%Y")) %>%
mutate(VisitDate = as.Date(Vdate, format="%d-%b-%Y")) %>%
mutate(Age = as.numeric(VisitDate - BirthDate) / 365.25)
cafe %>%
count(
Ethnicity, NativeAmerican, Asian, PacificIslander,
AfricanAmerican, White)
cafe_sitz <- read_tsv("combo_cafe_clinical_forms/CAFE_SITZ.txt")
cafe %>%
select(Pid, Vdate, Age) %>%
left_join(cafe_sitz %>% select(Pid, Sit1), by="Pid") %>%
arrange(Pid)
cafe %>%
ggplot() +
geom_histogram(aes(x=Age), binwidth = 1)
write_tsv(combo, "combo_beiting.txt")
getwd()
source("http://bioconductor.org/biocLite.R")
BiocManager::install
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install()
clear
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install()
library(ggplot2)
?ggplot2
?Limma
library(limma)
?limma
??voom
?voom
install.packages("BiocManager")
BiocManager::install()
setRepositories()
setRepositories()
install.packages("limma")
library(limma)
?gostplot
setwd("~/Desktop/renv_test")
renv::restrestore()
renv::restore()
renv::project()
install.packages("esquisse")
data("mtcars")
esquisse:::esquisser()
ggExtra:::ggMarginalGadgetAddin ()
devtools::install_github("ecohealthalliance/lemis")
all_lemis <- lemis_data()
library(lemis)
all_lemis <- lemis_data()
all_lemis <- lemis_data()
all_lemis <- lemis_data()
?lemis_data
?lemis
usethis::browse_github_pat()
all_lemis <- lemis_data()
?datastorr_auth
datastorr::datastorr_auth()
all_lemis <- lemis_data()
datastorr_token
?datastorr_token
?datastorr_token
??datastorr_token
usethis::edit_r_environ()
usethis::edit_r_environ()
all_lemis <- lemis_data()
datastorr::datastorr_auth()
all_lemis <- lemis_data()
lemis_data()
usethis::git_sitrep()
usethis::git_credentials()
usethis::edit_r_profile()
library(lemis)
lemis_data()
usethis::edit_r_environ()
BiocManager::install('romanhaa/cerebroApp')
install.packages("gdtools")
find.package('cerebroApp’)
q
quit
esc
find.package('cerebroApp')
setwd("~/DIYtranscriptomics/general")
library(ggplot2)
library(googlesheets4)
library(tidyverse)
library(lubridate)
library(reshape2)
library(hrbrthemes)
# read in data directly from google sheet
# reference for the paper describing this database is at: https://doi.org/10.1101/742304
scRNAseq <- read_sheet("https://docs.google.com/spreadsheets/d/1En7-UV0k0laDiIfjFkdn7dggyR7jIk3WH8QgXaMOZF0/edit#gid=0")
# tidy up the data a bit for plotting
scRNAseq <- scRNAseq %>%
mutate(year = lubridate::year(Date),
month = lubridate::month(Date),
day = lubridate::day(Date)) %>%
rename(Reported_cells_total = `Reported cells total`)
# scatter and box plot showing increase in total cells profiled over time.
# points colored by technology
ggplot(scRNAseq, aes(x=factor(year), y=Reported_cells_total)) +
geom_boxplot(trim = FALSE, show.legend = FALSE, outlier.shape = NA) +
geom_jitter(trim = FALSE, show.legend = FALSE, size =3,
aes(color=Technique, text = paste("Symbol:", Tissue))) +
scale_y_log10() +
labs(y="Total Cells Profiled", x = "Date",
title="The landscape of single cell sequencing experiments",
caption="data source: bit.ly/singleCellDB_data \nscript source: bit.ly/singleCellDB_script") +
theme(legend.position = 'none') +
theme_ipsum_rc(axis_title_size = 18,
axis_title_face = "plain",
axis_title_just = "c",
caption_size = 14,)
# filter this list based on tissue type
# combine 'Small intestine' and 'colon' to be just 'Intestine'
scRNAseq_filtered <- scRNAseq %>%
filter(Tissue %in% c("Brain", "Embryo", "Culture", "Lung", "Kidney", "Tumor",
"Blood", "Bone marrow", "Eye", "Pancreas", "Intestine",
"Colon", "Small intestine", "Skin", "Spleen", "Lymph node",
"Liver", "Heart", "Thymus", "Placenta", "Organoid", "Whole organism")) %>%
mutate(Tissue = replace(Tissue, Tissue == "Small intestine", "Intestine")) %>%
mutate(Tissue = replace(Tissue, Tissue == "Colon", "Intestine"))
# Produce bar plot of showing count of different tissues profiled
ggplot(scRNAseq_filtered, aes(x=fct_infreq(Tissue), fill=Tissue)) +
geom_bar(show.legend = FALSE) +
coord_flip() +
labs(y="Total number of experiments", x = "Tissue type",
title="Tissues profiled by scRNAseq",
caption="data source: bit.ly/singleCellDB_data \nscript source: bit.ly/singleCellDB_script") +
theme_ipsum_rc(axis_title_size = 18,
axis_title_face = "plain",
axis_title_just = "c",
caption_size = 14)
# scatter and box plot showing increase in total cells profiled over time.
# points colored by technology
p <- ggplot(scRNAseq, aes(x=factor(year), y=Reported_cells_total)) +
geom_boxplot(trim = FALSE, show.legend = FALSE, outlier.shape = NA) +
geom_jitter(trim = FALSE, show.legend = FALSE, size =3,
aes(color=Technique, text = paste("Symbol:", Tissue))) +
scale_y_log10() +
labs(y="Total Cells Profiled", x = "Date",
title="The landscape of single cell sequencing experiments",
caption="data source: bit.ly/singleCellDB_data \nscript source: bit.ly/singleCellDB_script") +
theme(legend.position = 'none') +
theme_ipsum_rc(axis_title_size = 18,
axis_title_face = "plain",
axis_title_just = "c",
caption_size = 14,)
ggplotly(p)
library(plotly)
ggplotly(p)
# scatter and box plot showing increase in total cells profiled over time.
# points colored by technology
ggplot(scRNAseq, aes(x=factor(year), y=Reported_cells_total)) +
geom_boxplot(trim = FALSE, show.legend = FALSE, outlier.shape = NA) +
geom_jitter(trim = FALSE, show.legend = FALSE, size =3,
aes(color=Technique, text = paste("Symbol:", Tissue))) +
scale_y_log10() +
labs(y="Total Cells Profiled", x = "Date",
title="The landscape of single cell sequencing experiments",
caption="data source: bit.ly/singleCellDB_data \nscript source: bit.ly/singleCellDB_script") +
theme(legend.position = 'none') +
theme_ipsum_rc(axis_title_size = 18,
axis_title_face = "plain",
axis_title_just = "c",
caption_size = 14)
